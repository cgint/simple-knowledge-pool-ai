---
description: 
globs: 
alwaysApply: true
---
# Graphiti MCP Memory System Guidelines
Guidelines for using Graphiti MCP memory system (http://localhost:8667/sse).
Use when: storing user preferences/procedures, searching past context, or when persistent memory across sessions is needed. Contains MCP tool  usage patterns and best practices for building knowledge graph relationships.

## Overview
This project uses Graphiti MCP server for persistent memory and knowledge graph capabilities. The MCP server is configured at `http://localhost:8667/sse` and stores information in a Neo4j knowledge graph.

## Before Starting Any Task

- **Always search first:** Use the `search_memory_nodes` tool to look for relevant preferences and procedures before beginning work
- **Search for facts too:** Use the `search_memory_facts` tool to discover relationships and factual information that may be relevant to your task
- **Filter by entity type:** Specify `Preference`, `Procedure`, or `Requirement` in your node search to get targeted results
- **Review all matches:** Carefully examine any preferences, procedures, or facts that match your current task

## What is the purpose of saving in memory - Be mindful when selecting to store specific detail VS an abstracted concept of what you want to save for later

- Saving to memory is **meant to help in the future** in similar situations.
- So it is very important to focus on a **generalisation of the current specific challenge or aspect**.
- To make most out of memory in the future, it is important to remember information in the **necessary abstraction** so it can be **applied to future slightly different situations as well**.
- Please **avoid mentioning very specific situations*** in in your memory, **unless you think this specific information is necessary to guide you in future similar situations**.

## Always Save New or Updated Information

- **Capture requirements and preferences immediately:** When a user expresses a requirement or preference, use `add_memory` to store it right away
  - _Best practice:_ Split very long requirements into shorter, logical chunks
- **Be explicit if something is an update to existing knowledge:** Only add what's changed or new to the graph
- **Document procedures clearly:** When you discover how a user wants things done, record it as a generalised procedure
- **Record factual relationships:** When you learn about connections between entities, store these as facts
- **Be specific with categories:** Label preferences and procedures with clear categories for better retrieval later

## During Your Work

- **Respect discovered preferences:** Align your work with any preferences you've found
- **Follow procedures exactly:** If you find a procedure for your current task, follow it step by step
- **Apply relevant facts:** Use factual information to inform your decisions and recommendations
- **Stay consistent:** Maintain consistency with previously identified preferences, procedures, and facts

## Best Practices

- **Search before suggesting:** Always check if there's established knowledge before making recommendations
- **Combine node and fact searches:** For complex tasks, search both nodes and facts to build a complete picture
- **Use `center_node_uuid`:** When exploring related information, center your search around a specific node
- **Prioritize specific matches:** More specific information takes precedence over general information
- **Be proactive:** If you notice patterns in user behavior, consider storing them as preferences or procedures

**Remember:** The knowledge graph is your memory. Use it consistently to provide personalized assistance that respects the user's established preferences, procedures, and factual context.
